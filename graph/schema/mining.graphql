type MiningSummaryDay {
    day: Time!
    miner: Address!
    wonBlock: Int!
}

type MiningCount {
    include: Int!
    exclude: Int!
}

type MiningCountSummary {
    start: Time!
    end: Time!
    total: Int!
    won: Int!
    included: Int!
    actor: Address @goTag(key: "json", value: "-")
    previous: MiningCountSummary @goField(forceResolver: true)
}

type MiningTask {
    taskId: ID!
    spId: Address!
    epoch: Int!
    baseComputeTime: Time!
    won: Boolean!
    minedCid: String
    minedHeader: JSON
    minedAt: Time
    submittedAt: Time
    included: Boolean
}

type MiningCountAggregated {
    time: Time!
    total: Int!
    won: Int!
    included: Int!
}

type MiningStatusSummay {
    total: Int!
    won: Int!
    included: Int!
    wonChangeRate: Float!
    lastMinedAt: NullInt64!
}

extend type Query {
    miningSummaryByDay(start: Time!, end: Time!): [MiningSummaryDay] @hasRole(role: USER)
    miningCount(start: Time!, end: Time!, actor: Address): MiningCount! @hasRole(role: USER)
    miningWins(start: Time, end: Time, actor: Address, include: Boolean, offset: Int!, limit: Int!): [MiningTask] @hasRole(role: USER)
    miningWinsCount(start: Time, end: Time, actor: Address, include: Boolean): Int! @hasRole(role: USER)
    miningCountSummary(start: Time!, end: Time!, actor: Address): MiningCountSummary @hasRole(role: USER)
    miningCountAggregate(start: Time!, end: Time!, actor: Address, interval: MiningTaskAggregateInterval!): [MiningCountAggregated] @hasRole(role: USER)
    miningStatusSummay(spID: ActorID, start: Time!, end: Time!): MiningStatusSummay @hasRole(role: USER)
}
