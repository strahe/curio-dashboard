type PipelineSummary {
    id: Address!
    sdr: Int!
    trees: Int!
    precommitMsg: Int!
    waitSeed: Int!
    porep: Int!
    commitMsg: Int!
    done: Int!
    failed: Int!
}

enum TaskStatus {
    Pending
    Running
    Completed
    Failed
}

enum PorepStage @goModel(model: "model.PorepStage") {
  SDR @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageSDR")
  TreeD @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageTreeD")
  TreeC @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageTreeC")
  TreeR @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageTreeR")
  Synthetic @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageSynthetic")
  PrecommitMsg @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStagePrecommitMsg")
  PrecommitMsgWait @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStagePrecommitMsgWait")
  WaitSeed @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageWaitSeed")
  Porep @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStagePorep")
  CommitMsg @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageCommitMsg")
  CommitMsgWait @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageCommitMsgWait")
  Finalize @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageFinalize")
  MoveStorage @goEnum(value: "github.com/web3tea/curio-dashboard/graph/model.PorepStageMoveStorage")
}

type TaskCompactStage {
    name: String!
    status: TaskStatus!
    taskId: Int
}

type Porep {
    id: ID!
    spId: Address!
    sectorNumber: Int!
    createTime: Time!
    regSealProof: Int!
    ticketEpoch: Int
    ticketValue: Bytes
    taskIdSdr: Int
    afterSdr: Boolean!
    treeDCid: String
    taskIdTreeD: Int
    afterTreeD: Boolean!
    taskIdTreeC: Int
    afterTreeC: Boolean!
    treeRCid: String
    taskIdTreeR: Int
    afterTreeR: Boolean!
    precommitMsgCid: String
    taskIdPrecommitMsg: Int
    afterPrecommitMsg: Boolean!
    seedEpoch: Int
    precommitMsgTsk: Bytes
    afterPrecommitMsgSuccess: Boolean!
    seedValue: Bytes
    taskIdPorep: Int
    porepProof: Bytes
    afterPorep: Boolean!
    taskIdFinalize: Int
    afterFinalize: Boolean!
    taskIdMoveStorage: Int
    afterMoveStorage: Boolean!
    commitMsgCid: String
    taskIdCommitMsg: Int
    afterCommitMsg: Boolean!
    commitMsgTsk: Bytes
    afterCommitMsgSuccess: Boolean!
    failed: Boolean!
    failedAt: Time
    failedReason: String!
    failedReasonMsg: String!
    taskIdSynth: Int
    afterSynth: Boolean!
    userSectorDurationEpochs: Int
    precommitReadyAt: Time
    commitReadyAt: Time

    status: TaskStatus!
    stage: PorepStage!
    currentTask: Task
    compactStages: [TaskCompactStage!]!
}

extend type Query {
    poreps: [Porep]
    porep(sp: Address!, sectorNumber: Int!): Porep
    pipelinesSummary: [PipelineSummary]
}
