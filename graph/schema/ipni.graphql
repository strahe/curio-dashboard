type IPNIStats {
    totalAdvertisements: Int! @goField(forceResolver: true)
    previousTotalAdvertisements: Int! @goField(forceResolver: true)
    providers: Int! @goField(forceResolver: true)
    previousProviders: Int! @goField(forceResolver: true)
    indexed: Int! @goField(forceResolver: true)
    previousIndexed: Int! @goField(forceResolver: true)
    skipped: Int! @goField(forceResolver: true)
    previousSkipped: Int! @goField(forceResolver: true)
    pendingTasks: Int! @goField(forceResolver: true)
    previousPendingTasks: Int! @goField(forceResolver: true)
}

# IPNI Advertisement object representing entries in the ipni table
type IPNIAdvertisement {
    # Unique identifier for the advertisement
    orderNumber: Int!

    # Content identifiers
    pieceCid: String!
    adCid: String!
    previous: NullString!
    contextId: Bytes!

    # Advertisement metadata
    pieceSize: Int!
    provider: IPNIPeerID @goField(forceResolver: true) @goTag(key: "db", value: "-")
    providerPeerID: String! @goTag(key: "json", value: "-") @goTag(key: "db", value: "provider")
    entries: String!
    addresses: String!

    # Status flags
    isSkip: Boolean!
    isRm: Boolean!
    signature: Bytes!
}

# IPNI Task object representing entries in the ipni_task table
type IPNITask {
    # Task identifier
    taskId: Int!

    # Content identifier
    contextId: Bytes

    # Status
    complete: Boolean!
    isRm: Boolean

    # Sector information
    sector: Int
    sectorOffset: Int!

    # Provider information
    spId: ActorID
    provider: String

    # Proof information
    regSealProof: Int

    # Metadata
    createdAt: Time
}

type IPNIPeerID {
    peerID: String!
    spID: ActorID!
}

type IPNIHead {
    head: String!
    provider: String!
}

enum IPNIProviderStatus {
    ACTIVE
    INACTIVE
    UNKNOWN
}

type IPNIProvider {
    spID: ActorID!
    peerID: String!
    head: String! @goField(forceResolver: true)
    adCount: Int! @goField(forceResolver: true)
    status: IPNIProviderStatus! @goField(forceResolver: true)
}

extend type Query {
    ipniStats: IPNIStats!

    # Get a single IPNI advertisement by order number
    ipniAdvertisement(orderNumber: Int!): IPNIAdvertisement

    # Get a list of IPNI advertisements with pagination and filtering
    ipniAdvertisements(
        offset: Int! = 0
        limit: Int! = 10
        provider: String
        isSkip: Boolean
        isRemoved: Boolean
    ): [IPNIAdvertisement!]!

    # Get total count of IPNI advertisements matching the filters
    # This is separated for more efficient querying
    ipniAdvertisementsCount(
        provider: String
        isSkip: Boolean
        isRemoved: Boolean
    ): Int!

    # Get a single IPNI task by task ID
    ipniTask(taskId: Int!): IPNITask

    # Get a list of IPNI tasks with pagination and filtering
    ipniTasks(
        limit: Int
        spId: ActorID
        isRm: Boolean
    ): [IPNITask!]!

    # Get total count of IPNI tasks matching the filters
    ipniTasksCount(
        spId: ActorID
        isRm: Boolean
    ): Int!

    ipniProviders: [IPNIProvider!]!

}
