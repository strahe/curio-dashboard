type Miner {
    id: Address!
    info: MinerInfo
    power:MinerPower
    balance: MinerBalance
#    deadlines: [MinerDeadline!]
#    partitions(dix: Int!): [MinerPartition!]
#    faults: MinerFaults
#    recoveries: MinerRecoveries
#    availableBalance: BigInt
}

type PowerClaim {
    rawBytePower: BigInt
    qualityAdjPower: BigInt
}

type MinerInfo {
    owner: Address!
    worker: Address!
    newWorker: Address!
    controlAddresses: [Address!]
    workerChangeEpoch: Int!
    peerId: String!
    multiAddrs: [String!]
    windowPoStProofType: Int!
    sectorSize: Int!
    windowPoStPartitionSectors: Int!
    consensusFaultElapsed: Int!
    pendingOwnerAddress: Address!
    beneficiary: Address!
    beneficiaryTerm:MinerBeneficiaryTerm
    pendingBeneficiaryChange: MinerPendingBeneficiaryChange
}

type MinerBeneficiaryTerm  {
    quota:      BigInt!
    usedQuota:  BigInt!
    expiration: Int!
}

type MinerPendingBeneficiaryChange {
    newBeneficiary:        Address!
    newQuota:              BigInt!
    newExpiration:         Int!
    approvedByBeneficiary: Boolean!
    approvedByNominee:     Boolean!
}

type MinerPower {
    id: ID!
    minerPower:  PowerClaim!
    totalPower:  PowerClaim!
    hasMinPower: Boolean!
}

type MinerBalance {
    id: Address!
    balance: BigInt!
    available: BigInt!
    initialPledge: BigInt!
    vesting: BigInt!
    preCommitDeposits: BigInt!
}

extend type Query {
    miner(address: Address!): Miner @hasRole(role: USER)
    minerPower(address: Address): MinerPower @hasRole(role: USER)
}
