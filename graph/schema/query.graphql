scalar Address
scalar BigInt
scalar Time
scalar Uint64
scalar Int64
scalar JSONB
scalar Bytes
scalar JSON
scalar FIL
scalar PeerID
scalar ActorID
scalar NullString
scalar NullInt64
scalar NullBool
scalar Cid

type Query {
    global: Global!

    # config
    config(layer: String!): Config
    configs: [Config]

    # machine
    machine(id: Int!): Machine
    machines: [Machine]
    machineSummary: MachineSummary

    # task
    task(id: Int!): Task
    tasks: [Task]
    tasksCount: Int!
    taskHistories(start: Time, end: Time, hostPort: String, name: String, result: Boolean, offset: Int!, limit: Int!): [TaskHistory]
    taskHistoriesCount(start: Time, end: Time, hostPort: String, name: String, result: Boolean): Int!
    taskHistoriesAggregate(start: Time!, end: Time!, interval: TaskHistoriesAggregateInterval!): [TaskAggregate]
    tasksStats(start: Time!, end: Time!, machine: String): [TaskStats]
    taskNames: [String!]
    # storage
    storage(id: String!): Storage
    storagePaths: [StoragePath]
    storageStats: [StorageStats]

    # sector
    sectors(actor: Address, sectorNumber: Int, offset: Int!, limit: Int!): [Sector]
    sectorsCount(actor: Address): Int!
    sector(actor: Address!, sectorNumber: Int!): Sector

    # actor
    actors: [Actor]
    actor(address: Address!): Actor

    # porep
    poreps: [Porep]
    porep(sp: Address!, sectorNumber: Int!): Porep
    pipelinesSummary: [PipelineSummary]

    # chain
    nodesInfo: [NodeInfo]

    # mining
#    miningSummaryByDay(lastDays: Int!): [MiningSummaryDay]
    miningSummaryByDay(start: Time!, end: Time!): [MiningSummaryDay]
    miningCount(start: Time!, end: Time!, actor: Address): MiningCount!
    miningWins(start: Time, end: Time, actor: Address, include: Boolean, offset: Int!, limit: Int!): [MiningTask]
    miningWinsCount(start: Time, end: Time, actor: Address, include: Boolean): Int!
    miningCountSummary(start: Time!, end: Time!, actor: Address): MiningCountSummary
    miningCountAggregate(start: Time!, end: Time!, actor: Address, interval: MiningTaskAggregateInterval!): [MiningCountAggregated]

    dealsPending: [OpenSectorPiece]

    alerts: [Alert]

    # metrics
    metricsActiveTasks(lastDays: Int!, machine: String): [MetricsActiveTask]

    miner(address: Address!): Miner
    # if address is empty, return all miners power
    minerPower(address: Address): MinerPower
}

enum TaskHistoriesAggregateInterval {
    day
    hour
}

enum MiningTaskAggregateInterval {
    day
    hour
}
