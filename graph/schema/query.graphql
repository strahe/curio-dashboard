scalar ActorID

type Query {
    global: Global!

    # config
    config(layer: String!): Config
    configs: [Config]

    # machine
    machine(id: Int!): Machine
    machines: [Machine]
    machineSummary: MachineSummary

    # task
    task(id: Int!): Task
    tasks: [Task]
    tasksCount: Int!
    taskHistories(start: Time, end: Time, hostPort: String, name: String, result: Boolean, offset: Int!, limit: Int!): [TaskHistory]
    taskHistoriesCount(start: Time, end: Time, hostPort: String, name: String, result: Boolean): Int!
    taskHistoriesAggregate(start: Time!, end: Time!, interval: TaskHistoriesAggregateInterval!): [TaskAggregate]
    tasksStats(start: Time!, end: Time!, machine: String): [TaskStats]
    taskNames: [String!]
    # storage
    storage(id: String!): Storage
    storagePaths: [StoragePath]
    storageStats: [StorageStats]

    # sector
    sectors(actor: ActorID, sectorNumber: Int, offset: Int!, limit: Int!): [Sector]
    sectorsCount(actor: ActorID): Int!
    sector(actor: ActorID!, sectorNumber: Int!): Sector

    # actor
    actors: [Actor]
    actor(address: Address!): Actor

    # porep
    poreps: [Porep]
    porep(sp: ActorID!, sectorNumber: Int!): Porep
    pipelinesSummary: [PipelineSummary]

    # chain
    nodesInfo: [NodeInfo]

    # mining
#    miningSummaryByDay(lastDays: Int!): [MiningSummaryDay]
    miningSummaryByDay(start: Time!, end: Time!): [MiningSummaryDay]
    miningCount(start: Time!, end: Time!, actor: ActorID): MiningCount!
    miningWins(start: Time, end: Time, actor: ActorID, include: Boolean, offset: Int!, limit: Int!): [MiningTask]
    miningWinsCount(start: Time, end: Time, actor: ActorID, include: Boolean): Int!
    miningCountSummary(start: Time!, end: Time!, actor: ActorID): MiningCountSummary
    miningCountAggregate(start: Time!, end: Time!, actor: ActorID, interval: MiningTaskAggregateInterval!): [MiningCountAggregated]

    dealsPending: [OpenSectorPiece]

    alerts: [Alert]

    # metrics
    metricsActiveTasks(lastDays: Int!, machine: String): [MetricsActiveTask]

    miner(address: Address!): Miner
    # if address is empty, return all miners power
    minerPower(address: Address): MinerPower
}

enum TaskHistoriesAggregateInterval {
    day
    hour
}

enum MiningTaskAggregateInterval {
    day
    hour
}
