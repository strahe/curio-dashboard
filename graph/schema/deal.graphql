type MarketMk12Deal {
  uuid: String!
  spId: ActorID!
  createdAt: Time!
  signedProposalCid: String!
  proposalSignature: Bytes!
  proposal: JSON!
  offline: Boolean!
  verified: Boolean!
  startEpoch: Int64!
  endEpoch: Int64!
  clientPeerId: String!
  chainDealId: NullInt64!
  publishCid: NullString!
  pieceCid: String!
  pieceSize: Uint64!
  fastRetrieval: Boolean!
  announceToIpni: Boolean!
  url: NullString!
  urlHeaders: JSON!
  error: NullString!
  label: Bytes
  proposalCid: String!
}

type DealInfo {
  id: String!
  spId: ActorID!
  sector: NullInt64!
  createdAt: Time!
  signedProposalCid: String!
  offline: Boolean!
  verified: Boolean!
  startEpoch: Int64!
  endEpoch: Int64!
  clientPeerId: PeerID!
  chainDealId: NullInt64!
  publishCid: NullString!
  pieceCid: String!
  pieceSize: Int64!
  fastRetrieval: Boolean!
  announceToIpni: Boolean!
  url: NullString!
  urls: String!
  urlHeaders: JSON!
  error: String!
  miner: String!
  isLegacy: Boolean!
  indexed: NullBool!
  isDdo: Boolean!
}

input MarketMk12DealFilterInput {
  spId: ActorID
  uuid: String
  signedProposalCid: String
  proposalCid: String
  pieceCid: String
}

type DealCountSummary {
    boost: Int!
    direct: Int!
    legacy: Int!
}

extend type Query {
  marketMk12Deals(filter: MarketMk12DealFilterInput!, limit: Int!, offset: Int!): [MarketMk12Deal!]! @hasRole(role: USER)
  marketMk12DealsCount(filter: MarketMk12DealFilterInput!): Int! @hasRole(role: USER)
  marketDealInfo(id: String!): DealInfo @hasRole(role: USER)
  marketDealCountSummary: DealCountSummary @hasRole(role: USER)
  dealsPending: [OpenSectorPiece] @hasRole(role: USER)
}

extend type Mutation {
    dealSealNow(miner: Address!, sectorNumber: Uint64!): Boolean! @hasRole(role: OPERATOR)
}
