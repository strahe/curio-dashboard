type Storage {
    id: String!
    path: StoragePath @goField(forceResolver: true)
    liveness:StorageLiveness @goField(forceResolver: true)
}

type StorageLiveness {
    storageId: String!
    url: String!
    lastChecked: Time!
    lastLive: Time
    lastDead: Time
    lastDeadReason: String
}

type StoragePath {
    id: ID!
    storageId: NullString!
    type: StorageType! @goField(forceResolver: true)
    urls: NullString!
    weight: NullInt64!
    maxStorage: NullInt64!
    canSeal: NullBool!
    canStore: NullBool!
    groups: NullString!
    allowTo: NullString!
    allowTypes: NullString!
    denyTypes: NullString!
    capacity: NullInt64!
    available: NullInt64!
    fsAvailable: NullInt64!
    reserved: NullInt64!
    used: NullInt64!
    lastHeartbeat: NullTime!
    heartbeatErr: NullString!
    allowMiners: NullString!
    denyMiners: NullString!
}

type StorageStats {
    type: StorageType!
    totalCapacity: Int64!
    totalAvailable: Int64!
    totalUsed: Int64!
    totalReserved: Int64!
    totalFsAvailable: Int64!
}


type StorageUsage {
    time: Time!
    available: Int64!
    used: Int64!
    reserved: Int64!
    fsAvailable: Int64!
}

enum StorageType {
    Hybrid
    Seal
    Store
    Readonly
}

extend type Query {
    storage(id: String!): Storage
    storages: [Storage!]!
    storageStats: [StorageStats]
}
