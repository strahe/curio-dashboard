type Task {
    id: Int!
    initiatedByID: Int @goTag(key: "db", value: "initiated_by")
    initiatedBy: Machine @goField(forceResolver: true)
    updateTime: Time!
    postedTime: Time!
    ownerId: Int
    owner: Machine @goField(forceResolver: true)
    addedByID: Int! @goTag(key: "db", value: "added_by")
    addedBy: Machine! @goField(forceResolver: true)
    previousTaskID: Int @goTag(key: "db", value: "previous_task")
    previousTask: TaskHistory @goField(forceResolver: true)
    name: String!
    histories: [TaskHistory] @goField(forceResolver: true)
}

type TaskSuccessRate {
    total: Int!
    success: Int!
    failure: Int!
    successRate: Float!
}

type RunningTaskSummary {
    running: Int!
    queued: Int!
    averageWaitTime: Float!
}

enum TaskHistoriesAggregateInterval {
    day
    hour
}

enum MiningTaskAggregateInterval {
    day
    hour
}

type TaskNameAggregate {
    name: String!
    total: Int!
    success: Int!
    failure: Int!
}

type TaskAggregate {
    time: Time!
    total: Int!
    success: Int!
    failure: Int!
}

type TaskStats {
    name: String!
    total: Int!
    success: Int!
    failure: Int!
}

type TaskDurationStats {
  name: String!
  totalTasks: Int!
  minDurationSeconds: Float!
  maxDurationSeconds: Float!
  avgDurationSeconds: Float!
  medianDurationSeconds: Float!
  p90DurationSeconds: Float!
  p95DurationSeconds: Float!
  p99DurationSeconds: Float!
}

type TaskHistory {
    id: Int!
    taskId: Int!
    name: String!
    posted: Time!
    workStart: Time!
    workEnd: Time!
    result: Boolean!
    err: String
    completedByHostAndPort: String!
    completedBy: Machine @goField(forceResolver: true)
}

type TaskSummary {
    name: String!
    trueCount: Int!
    falseCount: Int!
    totalCount: Int!
}

type TaskSummaryDay {
    day: Time!
    trueCount: Int!
    falseCount: Int!
    totalCount: Int!
}

extend type Query {
    task(id: Int!): Task @hasRole(role: USER)
    tasks: [Task] @hasRole(role: USER)
    tasksCount: Int! @hasRole(role: USER)
    taskHistories(start: Time, end: Time, hostPort: String, name: String, result: Boolean, offset: Int!, limit: Int!): [TaskHistory] @hasRole(role: USER)
    taskHistoriesCount(start: Time, end: Time, hostPort: String, name: String, result: Boolean): Int! @hasRole(role: USER)
    taskHistoriesAggregate(start: Time!, end: Time!, interval: TaskHistoriesAggregateInterval!): [TaskAggregate] @hasRole(role: USER)
    tasksStats(start: Time!, end: Time!, machine: String): [TaskStats] @hasRole(role: USER)
    taskNames: [String!] @hasRole(role: USER)
    taskSuccessRate(name: String, start: Time!, end: Time!): TaskSuccessRate @hasRole(role: USER)
    runningTaskSummary: RunningTaskSummary @hasRole(role: USER)
    taskDurationStats(name: String!, start: Time!, end: Time!): TaskDurationStats @hasRole(role: USER)
    tasksDurationStats(start: Time!, end: Time!): [TaskDurationStats!]! @hasRole(role: USER)
}

extend type Subscription {
    completedTask(machine: String, last: Int!): TaskHistory! @hasRole(role: USER)
    newTask(machineID: Int, last: Int!): Task! @hasRole(role: USER)
}
