package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"github.com/strahe/curio-dashboard/graph"
	"github.com/strahe/curio-dashboard/graph/model"
)

// Previous is the resolver for the previous field.
func (r *miningCountSummaryResolver) Previous(ctx context.Context, obj *model.MiningCountSummary) (*model.MiningCountSummary, error) {
	previousStart := obj.Start.Add(-obj.End.Sub(obj.Start))
	previousEnd := obj.Start

	previousSummary, err := r.loader.MiningCountSummary(ctx, previousStart, previousEnd, obj.Actor)
	if err != nil {
		return nil, fmt.Errorf("failed to get previous mining count summary: %w", err)
	}

	return previousSummary, nil
}

// MiningCountSummary returns graph.MiningCountSummaryResolver implementation.
func (r *Resolver) MiningCountSummary() graph.MiningCountSummaryResolver {
	return &miningCountSummaryResolver{r}
}

type miningCountSummaryResolver struct{ *Resolver }
