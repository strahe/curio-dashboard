package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"time"

	"github.com/web3tea/curio-dashboard/graph"
	"github.com/web3tea/curio-dashboard/graph/cachecontrol"
	"github.com/web3tea/curio-dashboard/graph/model"
)

// Storage is the resolver for the storage field.
func (r *queryResolver) Storage(ctx context.Context, id string) (*model.Storage, error) {
	return &model.Storage{ID: id}, nil
}

// StoragePaths is the resolver for the storagePaths field.
func (r *queryResolver) StoragePaths(ctx context.Context) ([]*model.StoragePath, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.StoragePaths(ctx)
}

// StorageStats is the resolver for the storageStats field.
func (r *queryResolver) StorageStats(ctx context.Context) ([]*model.StorageStats, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.StorageStats(ctx)
}

// Path is the resolver for the path field.
func (r *storageResolver) Path(ctx context.Context, obj *model.Storage) (*model.StoragePath, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute)
	return r.loader.StoragePath(ctx, obj.ID)
}

// Liveness is the resolver for the liveness field.
func (r *storageResolver) Liveness(ctx context.Context, obj *model.Storage) (*model.StorageLiveness, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute)
	return r.loader.StorageLiveness(ctx, obj.ID)
}

// ID is the resolver for the id field.
func (r *storagePathResolver) ID(ctx context.Context, obj *model.StoragePath) (string, error) {
	return obj.StorageID, nil
}

// Type is the resolver for the type field.
func (r *storagePathResolver) Type(ctx context.Context, obj *model.StoragePath) (model.StorageType, error) {
	switch {
	case obj.CanStore && obj.CanSeal:
		return model.StorageTypeHybrid, nil
	case obj.CanSeal:
		return model.StorageTypeSeal, nil
	case obj.CanStore:
		return model.StorageTypeStore, nil
	default:
		return model.StorageTypeReadonly, nil
	}
}

// Storage returns graph.StorageResolver implementation.
func (r *Resolver) Storage() graph.StorageResolver { return &storageResolver{r} }

// StoragePath returns graph.StoragePathResolver implementation.
func (r *Resolver) StoragePath() graph.StoragePathResolver { return &storagePathResolver{r} }

type storageResolver struct{ *Resolver }
type storagePathResolver struct{ *Resolver }
