package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"time"

	"github.com/web3tea/curio-dashboard/graph"
	"github.com/web3tea/curio-dashboard/graph/cachecontrol"
	"github.com/web3tea/curio-dashboard/graph/model"
	"github.com/web3tea/curio-dashboard/types"
)

// Provider is the resolver for the provider field.
func (r *iPNIAdvertisementResolver) Provider(ctx context.Context, obj *model.IPNIAdvertisement) (*model.IPNIPeerID, error) {
	return r.loader.IpniPeerID(ctx, nil, &obj.ProviderPeerID)
}

// Head is the resolver for the head field.
func (r *iPNIProviderResolver) Head(ctx context.Context, obj *model.IPNIProvider) (string, error) {
	head, err := r.loader.IpniHead(ctx, obj.PeerID)
	if err != nil {
		return "", err
	}
	return head.Head, nil
}

// AdCount is the resolver for the adCount field.
func (r *iPNIProviderResolver) AdCount(ctx context.Context, obj *model.IPNIProvider) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniAdvertisementsCount(ctx, &obj.PeerID, nil, nil)
}

// Status is the resolver for the status field.
func (r *iPNIProviderResolver) Status(ctx context.Context, obj *model.IPNIProvider) (model.IPNIProviderStatus, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	count, err := r.loader.IpniTasksCount(ctx, &obj.PeerID, nil)
	if err != nil {
		return model.IPNIProviderStatusUnknown, err
	}
	if count == 0 {
		return model.IPNIProviderStatusInactive, nil
	}
	return model.IPNIProviderStatusActive, nil
}

// TotalAdvertisements is the resolver for the totalAdvertisements field.
func (r *iPNIStatsResolver) TotalAdvertisements(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniTotalAdvertisements(ctx)
}

// PreviousTotalAdvertisements is the resolver for the previousTotalAdvertisements field.
func (r *iPNIStatsResolver) PreviousTotalAdvertisements(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous total advertisements
	// use the current advertisement count for now
	return r.loader.IpniTotalAdvertisements(ctx)
}

// Providers is the resolver for the providers field.
func (r *iPNIStatsResolver) Providers(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniTotalProviders(ctx)
}

// PreviousProviders is the resolver for the previousProviders field.
func (r *iPNIStatsResolver) PreviousProviders(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous providers
	// use the current provider count for now
	return r.loader.IpniTotalProviders(ctx)
}

// Indexed is the resolver for the indexed field.
func (r *iPNIStatsResolver) Indexed(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniTotalIndexed(ctx)
}

// PreviousIndexed is the resolver for the previousIndexed field.
func (r *iPNIStatsResolver) PreviousIndexed(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous indexed
	// use the current indexed count for now
	return r.loader.IpniTotalIndexed(ctx)
}

// Skipped is the resolver for the skipped field.
func (r *iPNIStatsResolver) Skipped(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniTotalSkipped(ctx)
}

// PreviousSkipped is the resolver for the previousSkipped field.
func (r *iPNIStatsResolver) PreviousSkipped(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous skipped
	// use the current skipped count for now
	return r.loader.IpniTotalSkipped(ctx)
}

// PendingTasks is the resolver for the pendingTasks field.
func (r *iPNIStatsResolver) PendingTasks(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniPendingTasks(ctx)
}

// PreviousPendingTasks is the resolver for the previousPendingTasks field.
func (r *iPNIStatsResolver) PreviousPendingTasks(ctx context.Context, obj *model.IPNIStats) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	// todo: implement previous pending tasks
	// use the current pending tasks count for now
	return r.loader.IpniPendingTasks(ctx)
}

// IpniStats is the resolver for the ipniStats field.
func (r *queryResolver) IpniStats(ctx context.Context) (*model.IPNIStats, error) {
	return &model.IPNIStats{}, nil
}

// IpniAdvertisement is the resolver for the ipniAdvertisement field.
func (r *queryResolver) IpniAdvertisement(ctx context.Context, orderNumber int) (*model.IPNIAdvertisement, error) {
	return r.loader.IpniAdvertisement(ctx, orderNumber)
}

// IpniAdvertisements is the resolver for the ipniAdvertisements field.
func (r *queryResolver) IpniAdvertisements(ctx context.Context, offset int, limit int, provider *string, isSkip *bool, isRemoved *bool) ([]*model.IPNIAdvertisement, error) {
	return r.loader.IpniAdvertisements(ctx, provider, isSkip, isRemoved, offset, limit)
}

// IpniAdvertisementsCount is the resolver for the ipniAdvertisementsCount field.
func (r *queryResolver) IpniAdvertisementsCount(ctx context.Context, provider *string, isSkip *bool, isRemoved *bool) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute*5)
	return r.loader.IpniAdvertisementsCount(ctx, provider, isSkip, isRemoved)
}

// IpniTask is the resolver for the ipniTask field.
func (r *queryResolver) IpniTask(ctx context.Context, taskID int) (*model.IPNITask, error) {
	return r.loader.IpniTask(ctx, taskID)
}

// IpniTasks is the resolver for the ipniTasks field.
func (r *queryResolver) IpniTasks(ctx context.Context, limit *int, spID *types.ActorID, isRm *bool) ([]*model.IPNITask, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute)
	if spID != nil {
		peerID, err := r.loader.IpniPeerID(ctx, spID, nil)
		if err != nil {
			return nil, err
		}
		return r.loader.IpniTasks(ctx, &peerID.PeerID, limit, isRm)
	}
	return r.loader.IpniTasks(ctx, nil, limit, isRm)
}

// IpniTasksCount is the resolver for the ipniTasksCount field.
func (r *queryResolver) IpniTasksCount(ctx context.Context, spID *types.ActorID, isRm *bool) (int, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute)
	if spID != nil {
		peerID, err := r.loader.IpniPeerID(ctx, spID, nil)
		if err != nil {
			return 0, err
		}
		return r.loader.IpniTasksCount(ctx, &peerID.PeerID, isRm)
	}
	return r.loader.IpniTasksCount(ctx, nil, isRm)
}

// IpniProviders is the resolver for the ipniProviders field.
func (r *queryResolver) IpniProviders(ctx context.Context) ([]*model.IPNIProvider, error) {
	ids, err := r.loader.IpniPeerIDs(ctx)
	if err != nil {
		return nil, err
	}

	var providers []*model.IPNIProvider
	for _, id := range ids {
		providers = append(providers, &model.IPNIProvider{
			SpID:   id.SpID,
			PeerID: id.PeerID,
		})
	}
	return providers, nil
}

// IPNIAdvertisement returns graph.IPNIAdvertisementResolver implementation.
func (r *Resolver) IPNIAdvertisement() graph.IPNIAdvertisementResolver {
	return &iPNIAdvertisementResolver{r}
}

// IPNIProvider returns graph.IPNIProviderResolver implementation.
func (r *Resolver) IPNIProvider() graph.IPNIProviderResolver { return &iPNIProviderResolver{r} }

// IPNIStats returns graph.IPNIStatsResolver implementation.
func (r *Resolver) IPNIStats() graph.IPNIStatsResolver { return &iPNIStatsResolver{r} }

type iPNIAdvertisementResolver struct{ *Resolver }
type iPNIProviderResolver struct{ *Resolver }
type iPNIStatsResolver struct{ *Resolver }
