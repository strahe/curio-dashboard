package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"
	"time"

	"github.com/samber/lo"
	"github.com/web3tea/curio-dashboard/graph/model"
	"github.com/web3tea/curio-dashboard/graph/prometheus"
	"github.com/web3tea/curio-dashboard/types"
)

// PrometheusQuery is the resolver for the prometheusQuery field.
func (r *queryResolver) PrometheusQuery(ctx context.Context, query string, time *time.Time) (*model.PrometheusResponse, error) {
	value, warnings, err := r.prometheusAPI.Query(ctx, query, lo.FromPtr(time))
	if err != nil {
		return nil, fmt.Errorf("failed to query prometheus: %w", err)
	}
	if len(warnings) > 0 {
		return nil, fmt.Errorf("prometheus query warnings: %s", warnings)
	}
	if value == nil {
		return nil, fmt.Errorf("no value returned from prometheus")
	}

	return &model.PrometheusResponse{
		Data: types.MustJSON(value),
	}, nil
}

// PrometheusQueryRange is the resolver for the prometheusQueryRange field.
func (r *queryResolver) PrometheusQueryRange(ctx context.Context, query string, start time.Time, end time.Time, step int) (*model.PrometheusResponse, error) {
	value, warnings, err := r.prometheusAPI.QueryRange(ctx, query, prometheus.Range{
		Start: start,
		End:   end,
		Step:  time.Duration(step) * time.Second,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to query prometheus: %w", err)
	}
	if len(warnings) > 0 {
		return nil, fmt.Errorf("prometheus query warnings: %s", warnings)
	}
	if value == nil {
		return nil, fmt.Errorf("no value returned from prometheus")
	}
	return &model.PrometheusResponse{
		Data: types.MustJSON(value),
	}, nil
}
