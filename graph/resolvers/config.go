package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"errors"
	"fmt"
	"time"

	pgx "github.com/jackc/pgx/v5"
	"github.com/web3tea/curio-dashboard/graph"
	"github.com/web3tea/curio-dashboard/graph/cachecontrol"
	"github.com/web3tea/curio-dashboard/graph/model"
)

// UsedBy is the resolver for the usedBy field.
func (r *configResolver) UsedBy(ctx context.Context, obj *model.Config) ([]*model.MachineDetail, error) {
	return r.loader.ConfigUsed(ctx, obj.Title)
}

// CreateConfig is the resolver for the createConfig field.
func (r *mutationResolver) CreateConfig(ctx context.Context, title string, config string) (*model.Config, error) {
	_, err := r.loader.Config(ctx, title)
	if !errors.Is(err, pgx.ErrNoRows) {
		return nil, fmt.Errorf("config %s already exists", title)
	}
	if title == "" || config == "" {
		return nil, fmt.Errorf("title and config must be non-empty")
	}
	_, err = r.db.Exec(ctx, "INSERT INTO harmony_config (title, config) VALUES ($1, $2)", title, config)
	if err != nil {
		return nil, err
	}
	return r.loader.Config(ctx, title)
}

// UpdateConfig is the resolver for the updateConfig field.
func (r *mutationResolver) UpdateConfig(ctx context.Context, title string, config string) (*model.Config, error) {
	c, err := r.loader.Config(ctx, title)
	if err != nil {
		return nil, err
	}
	_, err = r.db.Exec(ctx, "UPDATE harmony_config SET config = $1 WHERE title = $2", config, title)
	if err != nil {
		return nil, err
	}
	c.Config = config
	return c, nil
}

// RemoveConfig is the resolver for the removeConfig field.
func (r *mutationResolver) RemoveConfig(ctx context.Context, title string) (*model.Config, error) {
	machines, err := r.loader.ConfigUsed(ctx, title)
	if err != nil {
		return nil, err
	}
	if len(machines) > 0 {
		return nil, fmt.Errorf("config %s is used by %d machines", title, len(machines))
	}

	cfg, err := r.loader.Config(ctx, title)
	if err != nil {
		return nil, err
	}

	ct, err := r.db.Exec(ctx, "DELETE FROM harmony_config WHERE title = $1", title)
	if err != nil {
		return nil, err
	}
	if ct == 0 {
		return nil, fmt.Errorf("config %s not found", title)
	}
	return cfg, nil
}

// Config is the resolver for the config field.
func (r *queryResolver) Config(ctx context.Context, layer string) (*model.Config, error) {
	return r.loader.Config(ctx, layer)
}

// Configs is the resolver for the configs field.
func (r *queryResolver) Configs(ctx context.Context) ([]*model.Config, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Minute)
	return r.loader.Configs(ctx)
}

// Config returns graph.ConfigResolver implementation.
func (r *Resolver) Config() graph.ConfigResolver { return &configResolver{r} }

type configResolver struct{ *Resolver }
