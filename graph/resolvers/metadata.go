package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"
	"time"

	"github.com/web3tea/curio-dashboard/graph"
	"github.com/web3tea/curio-dashboard/graph/cachecontrol"
	"github.com/web3tea/curio-dashboard/graph/model"
)

// NetworkName is the resolver for the networkName field.
func (r *metadataResolver) NetworkName(ctx context.Context, obj *model.Metadata) (string, error) {
	cachecontrol.SetHint(ctx, cachecontrol.ScopePrivate, time.Hour)
	n, err := r.fullNode.StateNetworkName(ctx)
	if err != nil {
		return "", err
	}
	return string(n), nil
}

// GenesisTimestamp is the resolver for the genesisTimestamp field.
func (r *metadataResolver) GenesisTimestamp(ctx context.Context, obj *model.Metadata) (uint64, error) {
	g, err := r.fullNode.ChainGetGenesis(ctx)
	if err != nil {
		return 0, err
	}
	return g.MinTimestamp(), nil
}

// Metadata is the resolver for the metadata field.
func (r *queryResolver) Metadata(ctx context.Context) (*model.Metadata, error) {
	return &model.Metadata{}, nil
}

// ChainHead is the resolver for the chainHead field.
func (r *subscriptionResolver) ChainHead(ctx context.Context) (<-chan *model.ChainHead, error) {
	ch := make(chan *model.ChainHead)

	headCh, err := r.fullNode.ChainNotify(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to subscribe to chain head: %w", err)
	}

	go func() {
		defer close(ch)

		for {
			select {
			case heads, ok := <-headCh:
				if !ok {
					return
				}

				for _, head := range heads {
					chainHead := &model.ChainHead{
						Height:    uint64(head.Val.Height()),
						Timestamp: uint64(head.Val.MinTimestamp()),
					}
					select {
					case ch <- chainHead:
					case <-ctx.Done():
						return
					}
				}

			case <-ctx.Done():
				return
			}
		}
	}()

	return ch, nil
}

// Metadata returns graph.MetadataResolver implementation.
func (r *Resolver) Metadata() graph.MetadataResolver { return &metadataResolver{r} }

type metadataResolver struct{ *Resolver }
